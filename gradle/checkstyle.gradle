/**
 * The Checkstyle Plugin
 *
 * Gradle plugin that performs quality checks on your project's Java source files using Checkstyle
 * and generates reports from these checks.
 *
 * Tasks:
 * Run Checkstyle against {rootDir}/src/main/java: ./gradlew checkstyleMain
 * Run Checkstyle against {rootDir}/src/test/java: ./gradlew checkstyleTest
 *
 * Reports:
 * Checkstyle reports can be found in {project.buildDir}/build/reports/checkstyle
 *
 * Configuration:
 * Checkstyle is very configurable. The configuration file is located at {rootDir}/config/checkstyle/checkstyle.xml
 *
 * Additional Documentation:
 * https://docs.gradle.org/current/userguide/checkstyle_plugin.html
 */

apply plugin: 'checkstyle'

checkstyle {
    // The version of the code quality tool to be used.
    // The most recent version of Checkstyle can be found at https://github.com/checkstyle/checkstyle/releases
    toolVersion = "8.30"

    // The source sets to be analyzed as part of the check and build tasks.
    // Use 'sourceSets = []' to remove Checkstyle from the check and build tasks.
//    sourceSets = [project.sourceSets.main, project.sourceSets.test]

    // Whether or not to allow the build to continue if there are warnings.
    ignoreFailures = false

    // Whether or not rule violations are to be displayed on the console.
    showViolations = true
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

checkstyleMain {
    // 代码检查跳过一些我们认为不需要检查的package
    exclude 'me/mybatis/**'
    exclude 'me/infrastructure/**'
    /*reports {
        // html形式的检查报告生成路径
        html.destination rootProject.file("build/reports/checkstyle/main.html")
    }*/
}
// test-->java
checkstyleTest {
    /*reports {
        html.destination rootProject.file("build/reports/checkstyle/test.html")
    }*/
}
task checkstyle(type: Checkstyle, group: 'verification') {

    try {//try一下，即使发生异常也不影响正常编译

        def isCheck = true //是否打开代码规范检查的开关
        def isCommit = project.hasProperty('checkCommit') //是否是提交前检查
        if (isCheck) {
            if (isCommit) {
                //检测代码路径
                //source project.rootDir //--- 检查项目中所有的文件, 比较慢, 下面分模块检查, 主要是src下面的java文件
                //source 'xxx/src'
                //source 'lib-xxx/src'
                //source 'src' //submodules的检查

                //排除项
                exclude '**/gen/**'
                exclude '**/test/**'
                exclude '**/res/**'
                exclude '**/androidTest/**'
                exclude '**/R.java'
                exclude '**/BuildConfig.java'

                //判断是否是git pre-commit hook触发的checkstyle
                //如果是，只检测要提交的java文件，否则检测路径下的所有java文件
                if (project.hasProperty('checkCommit') && project.property("checkCommit")) {
                    def ft = filterCommitter(getChangeFiles())
                    def includeList = new ArrayList<String>()
                    for (int i = 0; i < ft.size(); i++) {
                        String spliter = ft.getAt(i)
                        String[] spliterlist = spliter.split("/")
                        String fileName = spliterlist[spliterlist.length - 1]
                        includeList.add("**/" + fileName)
                    }
                    if (includeList.size() == 0) {
                        exclude '**/*.java'
                    } else {
                        println("includeList==" + includeList)
                        include includeList
                    }
                } else {
                    include '**/*.java'
                }
                classpath = files()

                reports { // 支持html和xml两种报告形式，可以任选其一(html更具有可读性)
                    xml.enabled = false
                    html.enabled = true
                    xml {
                        destination file("$reportsDir/checkstyle/checkstyle.xml")
                    }
                    html {
                        destination file("$reportsDir/checkstyle/checkstyle.html")
                    }
                }
            } else { //如果不是提交触发的，也就是对项目进行构建，那么需要对pre-commit文件进行copy
                def forceCopy = false //如有需要，可以强制去更新客户端的pre-commit文件
                try {
                    copyPreCommitFile(forceCopy)
                    //copySubmodulesPreCommitFile(forceCopy)
                } catch (Exception e) {
                    println(e)
                }
            }
        }

    }catch (Exception e){
        println("checkstyle catch an exception.")
        e.printStackTrace()
    }
}
//src是一个文件路径，target是一个目录路径
def copyFile(boolean forceUpdate, String src, String target){
    def fileName = "pre-commit"
    def targetFile = file(target + "/" + fileName)

    if(targetFile.exists() && targetFile.isFile() && !forceUpdate){ //目标文件存在且没有强制更新，不需要copy操作
        println(targetFile.absolutePath + " exist.")
    }else {
        //targetFile.delete()
        def srcFile = file(src)
        if (srcFile.isFile()) {
            copy {
                from srcFile
                into target
            }
        }
    }
    //targetFile = file(target + "/" + fileName)
    if(targetFile.isFile()) {
        if (!targetFile.canExecute()) {
            targetFile.setExecutable(true)
        }
        if (!targetFile.canWrite()) {
            targetFile.setWritable(true)
        }
    }
}
//把根目录下的pre-commit文件复制到.git-->hooks目录
def copyPreCommitFile(boolean forceUpdate){

    def src = "${project.rootDir}/pre-commit"
    def target = "${project.rootDir}/.git/hooks"
    copyFile(forceUpdate, src, target)

    println("copyPreCommitFile")
}

//def reportsDir = "${project.buildDir}/reports"
//task checkstyle(type: Checkstyle, group: 'verification') {
//
//    try {//try一下，即使发生异常也不影响正常编译
//
//        def isCheck = true //是否打开代码规范检查的开关
//        def isCommit = project.hasProperty('checkCommit') //是否是提交前检查
//        if (isCheck) {
//            if (isCommit) {
//                //检测代码路径
//                //source project.rootDir //--- 检查项目中所有的文件, 比较慢, 下面分模块检查, 主要是src下面的java文件
//                source 'xxx/src'
//                source 'lib-xxx/src'
//                source 'src' //submodules的检查
//
//                //排除项
//                exclude '**/gen/**'
//                exclude '**/test/**'
//                exclude '**/res/**'
//                exclude '**/androidTest/**'
//                exclude '**/R.java'
//                exclude '**/BuildConfig.java'
//
//                //判断是否是git pre-commit hook触发的checkstyle
//                //如果是，只检测要提交的java文件，否则检测路径下的所有java文件
//                if (project.hasProperty('checkCommit') && project.property("checkCommit")) {
//                    def ft = filterCommitter(getChangeFiles())
//                    def includeList = new ArrayList<String>()
//                    for (int i = 0; i < ft.size(); i++) {
//                        String spliter = ft.getAt(i)
//                        String[] spliterlist = spliter.split("/")
//                        String fileName = spliterlist[spliterlist.length - 1]
//                        includeList.add("**/" + fileName)
//                    }
//                    if (includeList.size() == 0) {
//                        exclude '**/*.java'
//                    } else {
//                        println("includeList==" + includeList)
//                        include includeList
//                    }
//                } else {
//                    include '**/*.java'
//                }
//                classpath = files()
//
//                reports { // 支持html和xml两种报告形式，可以任选其一(html更具有可读性)
//                    xml.enabled = false
//                    html.enabled = true
//                    xml {
//                        destination file("$reportsDir/checkstyle/checkstyle.xml")
//                    }
//                    html {
//                        destination file("$reportsDir/checkstyle/checkstyle.html")
//                    }
//                }
//            } else { //如果不是提交触发的，也就是对项目进行构建，那么需要对pre-commit文件进行copy
//                def forceCopy = false //如有需要，可以强制去更新客户端的pre-commit文件
//                try {
//                    copyPreCommitFile(forceCopy)
//                    //copySubmodulesPreCommitFile(forceCopy)
//                } catch (Exception e) {
//                    println(e)
//                }
//            }
//        }
//
//    } catch (Exception e) {
//        println("checkstyle catch an exception.")
//        e.printStackTrace()
//    }
//}
////src是一个文件路径，target是一个目录路径
//    def copyFile(boolean forceUpdate, String src, String target) {
//        def fileName = "pre-commit"
//        def targetFile = file(target + "/" + fileName)
//
//        if (targetFile.exists() && targetFile.isFile() && !forceUpdate) { //目标文件存在且没有强制更新，不需要copy操作
//            println(targetFile.absolutePath + " exist.")
//        } else {
//            //targetFile.delete()
//            def srcFile = file(src)
//            if (srcFile.isFile()) {
//                copy {
//                    from srcFile
//                    into target
//                }
//            }
//        }
//
//        //targetFile = file(target + "/" + fileName)
//        if (targetFile.isFile()) {
//            if (!targetFile.canExecute()) {
//                targetFile.setExecutable(true)
//            }
//            if (!targetFile.canWrite()) {
//                targetFile.setWritable(true)
//            }
//        }
//    }
////把根目录下的pre-commit文件复制到.git-->hooks目录
//    def copyPreCommitFile(boolean forceUpdate) {
//
//        def src = "${project.rootDir}/pre-commit"
//        def target = "${project.rootDir}/.git/hooks"
//        copyFile(forceUpdate, src, target)
//
//        println("copyPreCommitFile")
//    }

